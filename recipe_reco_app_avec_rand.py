import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.neighbors import NearestNeighbors
import streamlit as st
from streamlit_lottie import st_lottie
import requests
from PIL import Image
from streamlit_card import card
import time
from streamlit_option_menu import option_menu
from sklearn.impute import SimpleImputer
import os
import psutil

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import unicodedata
import re
from streamlit_carousel import carousel

import streamlit as st




os.environ["LOKY_MAX_CPU_COUNT"] = str(psutil.cpu_count(logical=False))


# Appeler set_page_config() en premier

st.set_page_config(
    page_title="Veggie Delights",
    page_icon="ü•ó",
    layout="wide",
    initial_sidebar_state="expanded"
    
)

# pour lancer le code streamlit : streamlit run recipe_reco_app_avec_rand.py

# ouverture des fichiers csv n√©cessaires √† la cr√©ation de l'application (j'effectue certaines modifications)

#import des datasets viande et vg

df_full = pd.read_csv("df_yann_10h15.csv", sep=";",encoding='utf-8')
df_full['aggregaterating_x'] =  (df_full['aggregaterating_x'] * 5).round(2)
df_full = df_full.drop(columns = ['ingredient_recherche','URL_x','cookingTime_x',
                                   'nutritionalFacts_x', 'name_y','URL_y', "Description_y","Cooking time",'ingredients_y'
                                   ,'cookingTime_y', 'likes_y','negativeFeedbacks_y',
                                     'nutritionalFacts_y', 'positiveFeedbacks_y','video_y','url_y',
                                     'vegetarien_y', 'vegan_y', 'aggregaterating_y', 'image_y','pricePerPortionTag_y', 'difficulty_y'])


#df_full.columns = df_full.columns.str.replace(' ', '_')


mots_non_vegetariens = [
    'viande', 'poisson', 'volaille', 'crustac√©', 'fruit de mer',
    'porc', 'b≈ìuf', 'poulet', 'canard', 'agneau', 'veau', 'saumon', 'truite', 'thon',
    'sardine', 'maquereau', 'anchois', 'hareng', 'dorade', 'morue', 'crabe', 'homard',
    'crevette', 'moule', 'hu√Ætre', 'escargot', 'foie gras', 'jambon', 'saucisse', 'bacon',
    'steak', 'filet', 'r√¥ti', 'escalope', 'coquille saint-jacques', 'terrine', 'bavette', 'lard',
    'saint-jacques', 'haddock', 'cabillaud', 'dinde'
]

df_full['vegetarien_x'] = df_full['words_ingredients'].apply(lambda x: 0 if any(word in x.lower() for word in mots_non_vegetariens) else 1)




# S√©lection des lignes o√π 'vegetarien' est True
df_vg_test = df_full.loc[df_full['vegetarien_x'] == 1].reset_index(drop=True)

# S√©lection des lignes o√π 'vegetarien' est False
df_viande_test = df_full.loc[df_full['vegetarien_x'] == 0].reset_index(drop=True)



# pr√©parer les variables pour le syst√®me de recommandation par caract√©ristique

    
df_viande_test["vegan_x"] = df_viande_test["vegan_x"].astype(int)
df_vg_test["vegan_x"] = df_vg_test["vegan_x"].astype(int)
df_viande_test[ 'vegetarien_x'] = df_viande_test[ 'vegetarien_x'].astype(int)
df_vg_test[ 'vegetarien_x'] = df_vg_test[ 'vegetarien_x'].astype(int)
#df_vg_test.dropna(inplace=True)#suppression des lignes vides
#df_viande_test.dropna(inplace=True)#suppression des lignes vides



############################################################################################

# liste des recettes viande : pour selectbox

liste_viande  = df_viande_test.name_x

# liste des recettes v√©g√© : pour selectbox

#liste_vg  = df_vg_test.Nom_du_plat

# configuraton de streamlit

#st.set_page_config(layout="wide",initial_sidebar_state="collapsed")

# permet de connecter l'application avec fichier css

#with open('style.css') as f:
        #st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# pour avoir les animations

def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# afficher les annimation et le text

# menu et lottie

# Appliquer un style CSS √† la sidebar
st.markdown(
    """
    <style>
    .sidebar .sidebar-content {
        font-family: serif; /* Utilisation de la typographie serif */
        /* Autres styles que vous souhaitez appliquer */
    }
    </style>
    """
    , unsafe_allow_html=True
)

# Contenu de la sidebar avec le code pour l'animation et le menu
with st.sidebar:
    # Votre code pour l'animation
    url1 = "https://lottie.host/9f5df26b-1fa9-445c-aae0-432fca6ebc11/vYnbX7bQXg.json"
    lottie1 = load_lottieurl(url1)
    st_lottie(lottie1, key="jj", width=300, height=300)

    # Composant du menu
    selected2 = option_menu(
        "Menu", ["Page d'accueil", "Recommandation de recettes v√©g√©tariennes par caract√©ristiques",
                  "Recommandation de recettes v√©g√©tariennes par contenu", "Besoin d'inspiration ?", 
                  "Votre recette pas √† pas",
                  "Pourquoi limiter la consommation de viande ?"], 
        icons=["caret-right-fill", "caret-right-fill", "caret-right-fill", "caret-right-fill", "caret-right-fill", "caret-right-fill"], 
        menu_icon="bi-gift-fill", default_index=0, orientation="vertical"
    )

############################################################################################


# configuration de la page d'accueil 

if selected2 == "Page d'accueil":
     
     
    st.image("images/logo.png", width=300)
    st.title("Bienvenue sur l'application Veggie Delights")
    #  on peut rajouter une balise html  avec markdown
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""Les f√™tes de fin d'ann√©e arrivent √† grands pas ? Vous cherchez √† limiter votre consommation de viande et de poisson ?
                Notre application transforme chaque repas en une c√©l√©bration v√©g√©tarienne inoubliable.
                D√©couvrez des alternatives cr√©atives et d√©licieuses pour tous vos plats carn√©s de fin d'ann√©e.
                De d√©licats hors-d'≈ìuvre aux plats principaux somptueux, laissez-nous r√©inventer vos festivit√©s avec des saveurs v√©g√©tales sensationnelles.
                Faites de chaque repas une f√™te pour les papilles, sans compromis sur le plaisir ni sur la qualit√©.
                """)
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""<br>‚ûú Sur l'onglet "Recommandation de recettes v√©g√©tariennes par caract√©ristiques", vous trouverez des alternatives √† vos recettes carn√©es pr√©f√©r√©es bas√©es sur les caract√©ristiques suivantes :
                dur√©e de pr√©paration, dur√©e de cuisson, note sur Jow.fr, niveau de difficult√©, niveau de prix et calories par portion.<br>
                ‚ûú Sur l'onglet "Recommandation de recettes v√©g√©tariennes par contenu", vous trouverez des alternatives √† vos recettes carn√©es pr√©f√©r√©es bas√©es sur les caract√©ristiques suivantes :
                nom du plat, description et ingr√©dients.<br>
                ‚ûú Sur l'onglet "Besoin d'inspiration ?", obtenez en un clic une id√©e de recette v√©g√©tarienne pour les f√™tes !<br>
                ‚ûú Sur l'onglet "Pourquoi limiter la consommation de viande ?", retrouvez des graphiques et informations claires d√©montrant l'impact du v√©g√©tarisme sur la plan√™te et la sant√©.
                """, unsafe_allow_html=True)
    st.markdown("<hr>", unsafe_allow_html=True)
    st.image("images/repas-de-noel-vegetarien-nos-idees-recettes-faciles.jpeg", width=300)


    # Utilisation de Markdown pour mise en forme du lien
    if st.markdown(
        """
        <style>
        /* Style pour le lien */
        .custom-link {
            color: #000000; /* Couleur du texte */
            text-decoration: none; /* Supprimer le soulignement */
        }
        </style>
        """
        , unsafe_allow_html=True
    ):
        pass  # Action √† effectuer lors du clic, ici, ne rien faire

    # Affichage du lien avec la classe CSS pour le style personnalis√©
    st.markdown(
        """
            üë®‚Äçüç≥ Application r√©alis√©e en novembre 2023 par Cl√©mence Petit, Yann Floquet et Sevan Doizon, √©tudiants en Data Analyse √† la Wild Code School.
            <br><a href="https://jow.fr/" class="custom-link" target="_blank" rel="noopener noreferrer">Nos recettes sont toute issues du site internet de Jow.
        </a>
        """
        , unsafe_allow_html=True
    )


############################################################################################

# configuration de la page recommandation par genre

elif selected2 == "Recommandation de recettes v√©g√©tariennes par caract√©ristiques":
    st.title('Recommandation de recettes v√©g√©tariennes par caract√©ristiques')
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""Si vous souhaitez remplacer un plat ou une entr√©e contenant de la viande par son alternative v√©g√©tarienne, vous √™tes au bon endroit !
                Ici, les recettes similaires recommand√©es se basent sur les caract√©ristiques suivantes : dur√©e de pr√©paration, dur√©e de cuisson, note sur Jow.fr, niveau de difficult√©, niveau de prix et calories par portion.
                """)
    st.markdown("<hr>", unsafe_allow_html=True)

    # Configuration de la s√©lection d'une recette
 
    with st.container():
        st.markdown('''Choisir un plat contenant de la viande ou du poisson :''')
        option = st.selectbox(' ', liste_viande)

        with st.expander("Voir les d√©tails du plat"):
            df_input = df_viande_test[df_viande_test.name_x == option]
          
            # Renommer les colonnes et s√©lectionner les colonnes √† afficher
            colonnes_renommees = {
                "name_x": "Nom du plat ",
                "Description_x": "Description ",
                "Cooking_time" : "Dur√©e de pr√©paration en minutes ",
                "difficulty_x": "Niveau de difficult√© (sur 3) ",
                "url_x": "Lien vers la recette "
            }

            colonnes_selectionnees = ["name_x", "Description_x", "Cooking_time", "difficulty_x", "url_x"]

            df_details = df_input[colonnes_selectionnees].rename(columns=colonnes_renommees)
            
            # Utilisation des colonnes pour afficher l'image et les d√©tails c√¥te √† c√¥te
            
            col1, col2 = st.columns([1, 2])

            with col1:
                image_url = df_input["image_x"].values[0]
                try:
                    st.image(image_url, width=180)
                except:
                    st.error("Pas de photo disponible")

            with col2:
                
                for col in df_details.columns:
                    
                    st.markdown(
                        f"-  <span style='color: #424b54; font-weight: bold;'>{col}</span> : **{df_details[col].values[0]}**",
                        unsafe_allow_html=True)


    

  





    #definition des donn√©es pour la reco

    #X_viande = df_viande_test.select_dtypes(include = "number")
    #X_vg = df_vg_test.select_dtypes(include = "number")

    #choix des colonnes pour la reco
    
    #st.write(df_vg_test)
    #st.write(df_details)
    #st.write(df_input)
    colonnes_a_garder = ['Preparation extra time per cover', 'difficulty_x', 'Cooking_time',
                         'likes_x', 'negativeFeedbacks_x', 'positiveFeedbacks_x', 'CHOAVL/Glucides',
                         'ENERC/Calories', 'FAT/Matiere_graces', 'FIBTG/Fibres', 'PRO/Proteines',"aggregaterating_x"]
    X_viande = df_input.loc[:, colonnes_a_garder]
    
    
    X_vg = df_vg_test.loc[:, colonnes_a_garder]

    #st.write(X_viande)
    #normaliser pr mettre √† une meme echelle

    scaler = MinMaxScaler()
    # Appliquez le scaler aux donn√©es
    X_scale_viande = scaler.fit_transform(X_viande)
    #appliquer la meme chose pr les pok leg
    X_scale_vg = scaler.transform(X_vg)

    #recommandation

    #recherche dans les plats de viande
    distanceKNN = NearestNeighbors(n_neighbors=3).fit(X_scale_vg)

    #chercher les voisins vg
    result = distanceKNN.kneighbors(X_scale_viande)
    distances, ids =  distanceKNN.kneighbors(X_scale_viande)
    #print(ids)

    #ids_filtered = []

    #for i in range(len(ids)):
      #  valid_ids = [x for x in ids[i] if x < len(df_viande_test)]
      #  ids_filtered.append(valid_ids)
      #  print(ids_filtered)
    
    if st.button("Voir les recommandations"):
        with st.spinner("Recherche en cours..."):
            time.sleep(1)

# Utilisation des colonnes pour afficher l'image et les d√©tails c√¥te √† c√¥te
       
       
        flat = ids[0]
        reco = df_vg_test.iloc[flat,:]
     
        for i in range(3):
            
            with st.expander(f"Recommandation {i+1}"):
                col1, col2 = st.columns([1, 2])
                with col1:
                    try:
                        # Utilisation des indices individuels extraits des tuples dans ids
                        
                    
                        
                        

                        st.image(reco['image_x'].values[i], width=280)
                    except:
                        st.error("Pas de photo disponible")

        

                with col2:
                    
                    for col in reco[colonnes_selectionnees].columns:
                        
                    # Use the renaming dictionary to get the desired column name
                        renamed_col = colonnes_renommees.get(col, col)
                        st.markdown(f"- <span style='color: #424b54; font-weight: bold;'>{renamed_col}</span> : **{reco[col].values[i]}**",
                                unsafe_allow_html=True)
                st.markdown("<hr>", unsafe_allow_html=True)
                #st.download_button("T√©l√©charger les infos de la recette", df_details_recommended[col]) #√† tester

############################################################################################


# configuration de la page recommandation par th√®me

elif selected2 == "Recommandation de recettes v√©g√©tariennes par contenu":
    
    st.title('Recommandation de recettes v√©g√©tariennes par contenu')
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""Si vous souhaitez remplacer un plat ou une entr√©e contenant de la viande par son alternative v√©g√©tarienne, vous √™tes au bon endroit !
                Ici, les recettes similaires recommand√©es se basent sur les caract√©ristiques suivantes : nom du plat, description et ingr√©dients.
                """)
    st.markdown("<hr>", unsafe_allow_html=True)

    # configuration de la s√©lection d'un plat

    with st.container() :
        
            st.markdown('''Choisir un plat contenant de la viande ou du poisson :''')
            option_txt = st.selectbox(' ',liste_viande)
           
            
            with st.expander("Voir les d√©tails du plat :"):
                df_input_txt = df_viande_test[df_viande_test.name_x == option_txt]

               # Renommer les colonnes et s√©lectionner les colonnes √† afficher

                colonnes_renommees = {
                "name_x": "Nom du plat ",
                "Description_x": "Description ",
                "Cooking_time" : "Dur√©e de pr√©paration en minutes ",
                "difficulty_x": "Niveau de difficult√© (sur 3) ",
                "url_x": "Lien vers la recette "
                }

                colonnes_selectionnees = ["name_x", "Description_x", "Cooking_time", "difficulty_x", "url_x"]

                df_details_input_txt = df_input_txt[colonnes_selectionnees].rename(columns=colonnes_renommees)
                
                col1, col2 = st.columns([1, 2])

                with col1:

                    image_txt = df_input_txt["image_x"].values[0]

                    try :
                            
                        st.image(image_txt,width = 180)
                    except :
                        st.error("pas de photo disponible ")

                with col2:

                    for col in df_details_input_txt.columns:
                            st.markdown(f"- <span style='color: #424b54; font-weight: bold;'>{col}</span> : **{df_details_input_txt[col].values[0]}**",
                                        unsafe_allow_html=True)
                            
            

    

    # configuration de l'affichage et du syst√®me de recommandation     
    # pr√©paration des variables pour la recommandation par contenu
    
   
    def clean_text(cell):
        # Convertir en minuscules
        cleaned_text = cell.lower()
        
        # Supprimer les caract√®res sp√©ciaux et les virgules, conserver les accents
        cleaned_text = ''.join(c for c in unicodedata.normalize('NFD', cleaned_text) if unicodedata.category(c) != 'Mn')
        cleaned_text = re.sub(r'[^a-z, ]+', ' ', cleaned_text)
        
        return cleaned_text

    # Appliquer la fonction de nettoyage aux colonnes concern√©es et cr√©er de nouvelles colonnes nettoy√©es
    columns_to_clean = ["name_x", "Description_x", "ingredients_x", "words_ingredients"]

    for col in columns_to_clean:
        new_col_name = col + "_cleaned"  # Nom des nouvelles colonnes nettoy√©es
        df_viande_test[new_col_name] = df_viande_test[col].apply(clean_text)
        df_vg_test[new_col_name] = df_vg_test[col].apply(clean_text)

    #cr√©ation d'une liste de colonnes avec du contenu texte :

    liste_colonnes = ["name_x_cleaned", "Description_x_cleaned", "ingredients_x_cleaned", "words_ingredients_cleaned"] 

    #nous concat√©nons tout le texte dans une m√™me colonne nomm√©e "text_content"

    df_viande_test['text_content'] = df_viande_test[liste_colonnes].apply(lambda row: ' '.join(row.astype(str)), axis=1)
    df_vg_test['text_content'] = df_vg_test[liste_colonnes].apply(lambda row: ' '.join(row.astype(str)), axis=1)


    # D√©finir la largeur maximale des colonnes de texte
    pd.set_option('display.max_colwidth', None)

    # Utiliser TfidfVectorizer pour convertir le texte en vecteurs TF-IDF en excluant les mots de liaison 

    # Liste de mots vides en fran√ßais
    stop_words_french = [
        'le', 'la', 'les', 'de', 'du', 'des', 'un', 'une', 'et', 'en', 'au', 'aux', ","  # Exemple de mots vides en fran√ßais
    ]

    # Utiliser TfidfVectorizer avec les mots vides en fran√ßais
    vectorizer = TfidfVectorizer(stop_words=stop_words_french)
    text_matrix_viande = vectorizer.fit_transform(df_viande_test['text_content'])
    text_matrix_vg = vectorizer.transform(df_vg_test['text_content'])

    plat = option_txt

    condition = df_viande_test['name_x'].str.contains(plat) 

    df_input = df_viande_test[condition].reset_index(drop = True)

    
    # Trouver l'index de l'input dans df_viande_test
    input_index = df_viande_test.index[df_viande_test['name_x'] == plat][0]
    input_vector = text_matrix_viande[input_index]

    # Calculer la similarit√© cosinus entre l'input et les textes de df_vg_test
    similarities = cosine_similarity(input_vector, text_matrix_vg)

    # Obtenir les indices des lignes les plus similaires dans df_vg_test
    top_similar_indices = similarities.argsort(axis=1)[0][-3:]  # Obtenez les 3 lignes les plus similaires
    top_similar_rows = df_vg_test.iloc[top_similar_indices]
    #st.write(df_vg_test)
    if st.button("Voir les recommandations"):
        with st.spinner("Recherche en cours..."):
            time.sleep(1)
        
        for i, index in enumerate(top_similar_indices):
            with st.expander(f"Recommandation {i + 1}"):
                st.header(df_vg_test.iloc[index, 1])

                col1, col2 = st.columns([1, 2])

                with col1:

                    try:
                        st.image(df_vg_test.loc[index, "image_x"], width=200)
                    except:
                        st.error("Pas de photo disponible")

                with col2:

                    final = df_vg_test.loc[index, colonnes_selectionnees]
                    for col in colonnes_selectionnees:
                        renamed_col = colonnes_renommees[col]
                        value = final[col]
                        st.markdown(f"- <span style='color: #424b54; font-weight: bold;'>{renamed_col}</span> : **{value}**",
                                    unsafe_allow_html=True)



elif selected2 == "Besoin d'inspiration ?":
    # Lottie animation
    #url = "https://lottie.host/35c0a048-598b-4a3d-b088-dea216e64816/J1uxMIywwO.json"
    #st_lottie(url, speed=1, width=300, height=300)
    st.title("Besoin d'inspiration ?")
    #  on peut rajouter une balise html  avec markdown
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""Cliquez sur le bouton ci-dessous pour obtenir une d√©licieuse recette v√©g√©tarienne pour les f√™tes :
                """)
    def generer_idee_recette():
        random_row = df_vg_test.sample(n=1)
        st.write(random_row)

        # Cr√©er un bouton dans Streamlit
    if st.button('G√©n√©rer une id√©e de recette'):
        random_row = df_vg_test.sample(n=1)
        col1, col2 = st.columns([1, 2])

        with col1:

            image_txt = random_row["image_x"].values[0]

            try :
                            
                st.image(image_txt,width = 180)
            except :
                st.error("pas de photo disponible ")

        with col2:
            colonnes_renommees = {
                "name_x": "Nom du plat ",
                "Description_x": "Description ",
                "Cooking_time" : "Dur√©e de pr√©paration en minutes ",
                "difficulty_x": "Niveau de difficult√© (sur 3) ",
                "url_x": "Lien vers la recette "
            }

            colonnes_selectionnees = ["name_x", "Description_x", "Cooking_time", "difficulty_x", "url_x"]
            for col in  random_row[colonnes_selectionnees].columns:
                renamed_col = colonnes_renommees.get(col, col)
                st.markdown(f"- <span style='color: #424b54; font-weight: bold;'>{renamed_col}</span> : **{ random_row[col].values[0]}**",
                                        unsafe_allow_html=True)
            
elif selected2 =="Votre recette pas √† pas":
    st.title("Votre recette pas √† pas")
    #  on peut rajouter une balise html  avec markdown
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""S√©lectionnez la recette de votre choix et visionnez les √©tapes de la recette :
                """)
    get_name = df_full["name_x"]
    option = st.selectbox(' ', get_name)

    video = df_full.loc[df_full['name_x'] == option,'video_x'].values[0]
    st.video(video)
else :

    st.title("Pourquoi limiter la consommation de viande ?")
    #  on peut rajouter une balise html  avec markdown
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""Au cours des derni√®res d√©cennies, les √©missions de gaz √† effet de serre ont beaucoup augment√© comme vous pouvez le voir sur les graphiques suivants.
                Le v√©g√©tarisme se pr√©sente comme une excellente mani√®re d'aider √† la diminution de ces √©missions.
                """)
    st.markdown("<hr>", unsafe_allow_html=True)


    # Votre code pour tracer les courbes d'√©volution des √©missions GES
    data = {
        'Ann√©e': [1970, 1980, 1990, 2000, 2010, 2020],
        '√âmissions de CO2 (millions de tonnes)': [4500, 6000, 8000, 9500, 11000, 12000],
        '√âmissions de CH4 (milliers de tonnes)': [200, 220, 250, 300, 320, 350],
        '√âmissions de N2O (milliers de tonnes)': [100, 120, 150, 180, 200, 220]
    }

    df_emissions = pd.DataFrame(data)

    # Tracer des courbes d'√©volution des √©missions de CO2, CH4 et N2O au fil des ann√©es

    import seaborn as sns
    import matplotlib.pyplot as plt


    # Tracer des courbes d'√©volution des √©missions de CO2, CH4 et N2O au fil des ann√©es
    sns.set(style="whitegrid")

    fig, ax = plt.subplots(figsize=(8,4))  # Premier sous-plot pour les √©missions de CO2
    sns.lineplot(data=df_emissions, x='Ann√©e', y='√âmissions de CO2 (millions de tonnes)', color='#254E33', ax=ax)
    ax.set_title('√âvolution des √©missions de CO2 au fil des ann√©es')
    ax.set_xlabel('Ann√©e')
    ax.set_ylabel('√âmissions de CO2 (millions de tonnes)')
    st.pyplot(fig)

    fig, ax = plt.subplots(figsize=(8,4))  # Deuxi√®me sous-plot pour les √©missions de CH4
    sns.lineplot(data=df_emissions, x='Ann√©e', y='√âmissions de CH4 (milliers de tonnes)', color='#254E33', ax=ax)
    ax.set_title('√âvolution des √©missions de CH4 au fil des ann√©es')
    ax.set_xlabel('Ann√©e')
    ax.set_ylabel('√âmissions de CH4 (millions de tonnes)')
    st.pyplot(fig)

    fig, ax = plt.subplots(figsize=(8,4))  # Troisi√®me sous-plot pour les √©missions de N2O
    sns.lineplot(data=df_emissions, x='Ann√©e', y='√âmissions de N2O (milliers de tonnes)', color='#254E33', ax=ax)
    ax.set_title('√âvolution des √©missions de N2O au fil des ann√©es')
    ax.set_xlabel('Ann√©e')
    ax.set_ylabel('√âmissions de N2O (millions de tonnes)')
    st.pyplot(fig)


    # Le contenu du carrousel

    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("""D√©couvrez ci-dessous les impacts du v√©g√©tarisme sur notre environnement.
                """)
    st.markdown("<hr>", unsafe_allow_html=True)


    test_items = [
        {
            "title": "Moins d'√©missions de gaz √† effet de serre",
            "text": "Une nouvelle √©tude scientifique de chercheurs d'Oxford parue en juillet 2023 confirme qu'une alimentation carn√©e √©met 75 % de gaz √† effet de serre en plus qu'une di√®te √† base de v√©g√©taux.",
            "img": "https://cdn.futura-sciences.com/cdn-cgi/image/width=1024,quality=50,format=auto/sources/images/qr/gaz-a-effet-de-serre-rechauffement-climatique-2.jpeg",
        },
        {
            "title": "Diminution de la d√©forestation",
            "text": "L‚Äô√©levage du b√©tail est responsable d‚Äôenviron 80% de la destruction de la for√™t amazonienne et de 14% de la d√©forestation mondiale.",
            "img": "https://asialyst.com/fr/wp-content/uploads/2021/06/indonsie-deforestation.jpg",
        },
                {
            "title": "Une meilleure sant√©",
            "text": "Une nouvelle √©tude scientifique de chercheurs d'Oxford parue en juillet 2023 confirme qu'une alimentation carn√©e √©met 75 % de gaz √† effet de serre en plus qu'une di√®te √† base de v√©g√©taux.",
            "img": "https://www.usine-digitale.fr/mediatheque/2/9/0/001212092_896x598_c.jpg",
        },
        {
            "title": "Am√©lioration du bien-√™tre animal",
            "text": "Aujourd‚Äôhui les animaux sont √©lev√©s dans des usines, de mani√®re peu convenable. La plupart des poules ne voient jamais la lumi√®re du jour, les cochons ne vont jamais en ext√©rieur (les truies reproductrices sont maintenues allong√©es au sol dans des cages de gestation), les vaches laiti√®res sont f√©cond√©es 3 mois apr√®s chaque v√™lage avant d‚Äô√™tre abattue √† 5 ans. Les animaux ainsi trait√©s sont souvent plus vuln√©rables et donc bourr√©s d‚Äôantibiotiques.",
            "img": "https://www.eleusis-megara.fr/wp-content/uploads/2014/06/dfv.jpg",
        },
        # ... Autres √©l√©ments du carrousel
    ]

    for item in test_items:
        st.write(f"## {item['title']}")
        st.image(item['img'], use_column_width=True)
        st.write(item['text'])
        st.markdown("---")
